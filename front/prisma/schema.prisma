generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// --- ENUMS PARA CHECANCHA ---

enum Role {
  USER
  MANAGER // Dueño de un complejo
  ADMIN 
}

enum Sport {
  FUTBOL
  PADEL
  TENIS
  BASQUET
  VOLEY
}

enum BookingStatus {
  PENDIENTE 
  CONFIRMADO 
  COMPLETADO 
  CANCELADO  
}

// --- MODELOS DE LA BASE DE DATOS ---

model User {
  id             String    @id @default(cuid())
  name           String?
  phone          String?   @unique
  role           Role      @default(USER)
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  // Campos para NextAuth (Google, etc.)
  email          String?   @unique
  image          String?
  accounts       Account[]

  // Relaciones
  managedComplex Complex?  @relation("ManagedBy")
  bookings       Booking[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Complex {
  id          String    @id @default(cuid())
  name        String
  address     String
  city        String
  
  // Relaciones
  manager     User      @relation("ManagedBy", fields: [managerId], references: [id])
  managerId   String    @unique
  courts      Court[]
  schedule    Schedule?
}

model Court {
  id          String  @id @default(cuid())
  name        String  // Ej: "Cancha 1 - Fútbol 5"
  sport       Sport
  pricePerHour Int    // Precio en centavos
  
  // Relaciones
  complex     Complex   @relation(fields: [complexId], references: [id])
  complexId   String
  bookings    Booking[]
}

model Schedule {
  id          String @id @default(cuid())
  
  mondayOpen    Int?
  mondayClose   Int?
  tuesdayOpen   Int?
  tuesdayClose  Int?
  wednesdayOpen Int?
  wednesdayClose Int?
  thursdayOpen  Int?
  thursdayClose Int?
  fridayOpen    Int?
  fridayClose   Int?
  saturdayOpen  Int?
  saturdayClose Int?
  sundayOpen    Int?
  sundayClose   Int?

  complex     Complex @relation(fields: [complexId], references: [id])
  complexId   String  @unique
}

model Booking {
  id          String        @id @default(cuid())
  date        DateTime
  startTime   Int
  totalPrice  Int
  status      BookingStatus @default(PENDIENTE)
  createdAt   DateTime      @default(now())

  // Relaciones
  court       Court  @relation(fields: [courtId], references: [id])
  courtId     String
  user        User   @relation(fields: [userId], references: [id])
  userId      String

  @@unique([courtId, date, startTime])
}
