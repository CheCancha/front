generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// --- ENUMS PARA CHECANCHA ---

enum Role {
  USER
  MANAGER // Dueño de un complejo
  ADMIN
}

enum Sport {
  FUTBOL
  PADEL
  TENIS
  BASQUET
  VOLEY
}

enum BookingStatus {
  CONFIRMADO // Seña pagada, turno reservado.
  COMPLETADO // Turno jugado y 100% pagado.
  CANCELADO  // Turno cancelado por el usuario o el gestor.
}

// --- MODELOS DE LA BASE DE DATOS ---

model User {
  id             String    @id @default(cuid())
  name           String?
  phone          String?   @unique
  role           Role      @default(USER)
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  email    String?   @unique
  image    String?
  accounts Account[]

  managedComplex Complex?  @relation("ManagedBy")
  bookings       Booking[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Complex {
  id        String    @id @default(cuid())
  name      String
  address   String
  city      String
  
  manager   User      @relation("ManagedBy", fields: [managerId], references: [id])
  managerId String    @unique
  courts    Court[]
  schedule  Schedule?
}

model Court {
  id          String @id @default(cuid())
  name        String 
  sport       Sport
  pricePerHour Int   

  depositAmount Int  

  complex   Complex @relation(fields: [complexId], references: [id])
  complexId String
  bookings  Booking[]
}

model Schedule {
  id             String @id @default(cuid())
  
  mondayOpen     Int?
  mondayClose    Int?
  tuesdayOpen    Int?
  tuesdayClose   Int?
  wednesdayOpen  Int?
  wednesdayClose Int?
  thursdayOpen   Int?
  thursdayClose  Int?
  fridayOpen     Int?
  fridayClose    Int?
  saturdayOpen   Int?
  saturdayClose  Int?
  sundayOpen     Int?
  sundayClose    Int?

  complex   Complex @relation(fields: [complexId], references: [id])
  complexId String  @unique
}

model Booking {
  id        String   @id @default(cuid())
  date      DateTime
  startTime Int
  
  totalPrice       Int           // Precio total del turno (Ej: 16000)
  depositPaid      Int           // Monto de la seña que ya se pagó (Ej: 4000)
  remainingBalance Int           // Saldo pendiente (Ej: 12000)

  status    BookingStatus @default(CONFIRMADO)
  createdAt DateTime      @default(now())

  court   Court  @relation(fields: [courtId], references: [id])
  courtId String
  user    User   @relation(fields: [userId], references: [id])
  userId  String

  @@unique([courtId, date, startTime])
}


model InscriptionRequest {
  id          String @id @default(cuid())
  ownerName   String
  ownerPhone  String
  ownerEmail  String
  complexName String
  address     String
  city        String
  province    String
  sports      String
  selectedPlan String

  // Estado para gestionar el flujo de aprobación
  status      String   @default("PENDIENTE") // PENDIENTE, APROBADO, RECHAZADO
  createdAt   DateTime @default(now())
}