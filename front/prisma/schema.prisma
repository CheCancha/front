generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum SubscriptionPlan {
  BASE
  ESTANDAR
  FULL
  FREE
}

model User {
  id               String              @id @default(cuid())
  name             String
  phone            String?             @unique
  role             Role                @default(USER)
  hashedPassword   String?
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  email            String              @unique
  image            String?
  accounts         Account[]
  bookings         Booking[]
  managedComplex   Complex?            @relation("ManagedBy")
  passwordResetToken PasswordResetToken?
  reviews          Review[]
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  token     String   @unique
  expires   DateTime
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}


model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String?
  createdAt DateTime @default(now())

  complexId String
  complex   Complex  @relation(fields: [complexId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  bookingId String   @unique
  booking   Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@index([complexId])
  @@index([userId])
}

model Complex {
  id                    String   @id @default(cuid())
  name                  String
  slug                  String   @unique
  address               String
  city                  String
  province              String
  managerId             String   @unique
  onboardingCompleted   Boolean  @default(false)
  openHour              Int?
  closeHour             Int?
  courtCount            Int?
  timeSlotInterval      Int      @default(30)
  amenities             Amenity[]
  // Geolocalización para mapas
  latitude              Float?
  longitude             Float?
  
  // --- NUEVO --- Política de Cancelación en horas.
  cancellationPolicyHours Int    @default(24)

  // Mercado Pago
  mp_access_token       String?
  mp_refresh_token      String?
  mp_public_key         String?
  mp_user_id            String?
  mp_connected_at       DateTime?

  // Relaciones
  manager               User     @relation("ManagedBy", fields: [managerId], references: [id])
  courts                Court[]
  images                Image[]
  schedule              Schedule?
  subscriptionPlan      SubscriptionPlan @default(FREE)

  reviews               Review[]

  averageRating         Float    @default(0)
  reviewCount           Int      @default(0)

  @@index([managerId])
}

model Amenity {
  id        String    @id @default(cuid())
  name      String
  slug      String    @unique
  icon      String?

  complexes Complex[]
}

model Image {
  id        String   @id @default(uuid())
  url       String
  path      String
  complex   Complex  @relation(fields: [complexId], references: [id], onDelete: Cascade)
  complexId String
  isPrimary Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([complexId])
}

model Sport {
  id     String  @id @default(cuid())
  name   String
  slug   String  @unique
  icon   String?
  courts Court[]
}

model Court {
  id                  String      @id @default(cuid())
  name                String
  sportId             String      @default("cmfsf71vz0000i02g5a2vvvgd")
  sport               Sport       @relation(fields: [sportId], references: [id])
  slotDurationMinutes Int         @default(60)
  complexId           String
  bookings            Booking[]
  complex             Complex     @relation(fields: [complexId], references: [id], onDelete: Cascade)
  priceRules          PriceRule[]

  // --- ÍNDICES AÑADIDOS ---
  @@index([complexId])
  @@index([sportId])
}

model Schedule {
  id             String    @id @default(cuid())
  mondayOpen     Int?
  mondayClose    Int?
  tuesdayOpen    Int?
  tuesdayClose   Int?
  wednesdayOpen  Int?
  wednesdayClose Int?
  thursdayOpen   Int?
  thursdayClose  Int?
  fridayOpen     Int?
  fridayClose    Int?
  saturdayOpen   Int?
  saturdayClose  Int?
  sundayOpen     Int?
  sundayClose    Int?
  complexId      String    @unique
  complex        Complex   @relation(fields: [complexId], references: [id], onDelete: Cascade)
}

model Booking {
  id                 String        @id @default(cuid())
  date               DateTime
  startTime          Int
  startMinute        Int           @default(0)
  totalPrice         Int
  depositAmount      Int
  depositPaid        Int
  remainingBalance   Int
  status             BookingStatus @default(PENDIENTE)
  createdAt          DateTime      @default(now())
  courtId            String
  userId             String?
  court              Court         @relation(fields: [courtId], references: [id], onDelete: Cascade)
  user               User?         @relation(fields: [userId], references: [id], onDelete: SetNull)
  guestName          String?
  
  // --- NUEVO --- Teléfono para reservas de invitados.
  guestPhone         String?
  
  // --- NUEVO --- Flag para gestionar devoluciones pendientes.
  refundPending      Boolean       @default(false)

  paymentId          String?
  review             Review?

  @@unique([courtId, date, startTime])
  @@index([courtId])
  @@index([userId])
  @@index([date])
}

model PriceRule {
  id            String  @id @default(cuid())
  startTime     Int
  endTime       Int
  price         Int
  depositAmount Float   @default(0)
  courtId       String
  court         Court   @relation(fields: [courtId], references: [id], onDelete: Cascade)

  @@index([courtId])
}

model InscriptionRequest {
  id           String   @id @default(cuid())
  ownerName    String
  ownerPhone   String
  ownerEmail   String
  complexName  String
  address      String
  city         String
  province     String
  sports       String
  selectedPlan String
  status       String   @default("PENDIENTE")
  createdAt    DateTime @default(now())
}

enum Role {
  USER
  MANAGER
  ADMIN
}

enum BookingStatus {
  CONFIRMADO
  COMPLETADO
  CANCELADO
  PENDIENTE
}
