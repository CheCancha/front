generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id             String    @id @default(cuid())
  name           String?
  phone          String?   @unique
  role           Role      @default(USER)
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  email          String?   @unique
  image          String?
  accounts       Account[]
  bookings       Booking[]
  managedComplex Complex?  @relation("ManagedBy")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Complex {
  id                  String    @id @default(cuid())
  name                String
  address             String
  city                String
  province            String
  managerId           String    @unique
  onboardingCompleted Boolean   @default(false)
  slotDurationMinutes Int?
  openHour            Int?
  closeHour           Int?
  courtCount          Int?
  mp_access_token     String?
  mp_refresh_token    String?
  mp_public_key       String?
  mp_user_id          String?
  mp_connected_at     DateTime?
  manager             User      @relation("ManagedBy", fields: [managerId], references: [id])
  courts              Court[]
  images              Image[]
  schedule            Schedule?
}

model Image {
  id        String   @id @default(uuid())
  url       String
  path      String   
  complex   Complex  @relation(fields: [complexId], references: [id])
  complexId String
  isPrimary Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Court {
  id            String    @id @default(cuid())
  name          String
  sport         Sport
  pricePerHour  Int
  depositAmount Int
  complexId     String
  bookings      Booking[]
  complex       Complex   @relation(fields: [complexId], references: [id])
}

model Schedule {
  id             String  @id @default(cuid())
  mondayOpen     Int?
  mondayClose    Int?
  tuesdayOpen    Int?
  tuesdayClose   Int?
  wednesdayOpen  Int?
  wednesdayClose Int?
  thursdayOpen   Int?
  thursdayClose  Int?
  fridayOpen     Int?
  fridayClose    Int?
  saturdayOpen   Int?
  saturdayClose  Int?
  sundayOpen     Int?
  sundayClose    Int?
  complexId      String  @unique
  complex        Complex @relation(fields: [complexId], references: [id])
}

model Booking {
  id               String        @id @default(cuid())
  date             DateTime
  startTime        Int
  totalPrice       Int
  depositPaid      Int
  remainingBalance Int
  status           BookingStatus @default(PENDIENTE)
  createdAt        DateTime      @default(now())
  courtId          String
  userId           String
  court            Court         @relation(fields: [courtId], references: [id])
  user             User          @relation(fields: [userId], references: [id])

  @@unique([courtId, date, startTime])
}

model InscriptionRequest {
  id           String   @id @default(cuid())
  ownerName    String
  ownerPhone   String
  ownerEmail   String
  complexName  String
  address      String
  city         String
  province     String
  sports       String
  selectedPlan String
  status       String   @default("PENDIENTE")
  createdAt    DateTime @default(now())
}

enum Role {
  USER
  MANAGER
  ADMIN
}

enum Sport {
  FUTBOL
  PADEL
  TENIS
  BASQUET
  VOLEY
}

enum BookingStatus {
  CONFIRMADO
  COMPLETADO
  CANCELADO
  PENDIENTE
}
